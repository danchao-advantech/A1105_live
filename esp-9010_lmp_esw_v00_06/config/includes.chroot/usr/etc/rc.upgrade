#!/bin/bash

SD1_TMP="/tmp/sd1_tmp"

function file_update
{
   if [ -z $1 ]; then
      echo "Abort: unknown version for filesystem upgrade!"
      exit
   fi

   for file in $FileListDel; do
      rm -rf $file
   done

   for file in $FileListAdd; do
      dir=$(dirname $file)
      mkdir -p $dir
      cp -R -P -p "$SD1_TMP/$file" $dir 2>/dev/null
   done 

   touch /etc/version/$1
}

function history_update
{
   echo "Version=$1" >> $HISTORY
   echo "FileListAdd=$FileListAdd" | tr -s " " >> $HISTORY
   echo "FileListDel=$FileListDel" | tr -s " " >> $HISTORY
}

function sd1_mount
{
   df | grep "/lib/live/mount/persistence/sda1" > /dev/null
   if [ $? -eq 0 ]; then
      echo "Active Flash : /dev/sda"
      mkdir $SD1_TMP
      sudo mount -t squashfs /lib/live/mount/persistence/sda1/live/filesystem.squashfs $SD1_TMP
      return 0
   fi

   df | grep "/lib/live/mount/persistence/sdb1" > /dev/null
   if [ $? -eq 0 ]; then
      echo "Active Flash : /dev/sdb"
      mkdir $SD1_TMP
      sudo mount -t squashfs /lib/live/mount/persistence/sdb1/live/filesystem.squashfs $SD1_TMP
      return 1
   fi
}

function sd1_unmount
{
   sudo umount $SD1_TMP
   rm -rf $SD1_TMP
}

if [ ! -f /boot/version ]; then
   exit # do nothing if /boot/version does not exist (e.g. NFS boot)
fi

if [ ! -d /etc/version ]; then
   mkdir -p /etc/version
fi

VERSION=$(head -n1 /boot/version | cut -d ":" -f 2 | tr -d " ")
HISTORY="/etc/version/update_history.log"

if [ ! -f $HISTORY ]; then
   touch $HISTORY
fi

# mount sdx1
sd1_mount

#############################################################
# upgrade process:
# 1. delete unavailable files of newer versions (FileListDel)
# 2. upgrade added files of newer versions (FileListAdd)
# 3. update history of newer versions
#############################################################

VER=0.5
FileListAdd=""
FileListDel=""

if [ ! -f /etc/version/$VER ]; then
   file_update $VER
fi
if [ -z "$(grep -ne "^Version=$VER$" $HISTORY)" ]; then
   history_update $VER
fi


#############################################################
# downgrade process:
# 1. delete added files of newer versions (FileListDel)
# 2. restore touched files off newer version (FileListAdd)
# 3. clean update history of newer versions
#############################################################
FileListAdd=""
FileListDel=""

lineNum0=$(grep -ne "^Version=$VERSION$" $HISTORY | cut -d ":" -f 1)
lineNum=$(($lineNum0+3))
while [ -n "$(sed -n "${lineNum}p" $HISTORY)" ]; do
   lineNum=$(($lineNum+1))
   FileListAdd="$FileListAdd $(sed -n "${lineNum}p" $HISTORY | cut -d "=" -f 2)"
   FileListDel="$FileListDel $(sed -n "${lineNum}p" $HISTORY | cut -d "=" -f 2)"
   lineNum=$(($lineNum+1))
   FileListAdd="$FileListAdd $(sed -n "${lineNum}p" $HISTORY | cut -d "=" -f 2)"
   lineNum=$(($lineNum+1))
done

# update history
if [ -n "$FileListAdd" ] || [ -n "$FileListDel" ]; then
   file_update $VERSION
   lineNum=$(($lineNum0+3))
   while [ -n "$(sed -n "${lineNum}p" $HISTORY)" ]; do
      VER=$(sed -n "${lineNum}p" $HISTORY | grep "^Version=\(.*\)$" | cut -d "=" -f 2)
      if [ -n "$VER" ]; then
         rm -f /etc/version/$VER
      fi
      sed -i "${lineNum}d" $HISTORY
   done
fi


# umount sdx1
sd1_unmount

